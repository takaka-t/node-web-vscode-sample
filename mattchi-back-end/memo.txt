
バックエンド開発メモ(Express)
Docker を使用
実行環境 node
フレームワーク Express

Node + express + TypeScript 開発参考資料
https://zenn.dev/ichigoooo/scraps/dd632de444f448
https://gist.github.com/mitsuruog/fc48397a8e80f051a145

アプリディレクトリ構成
→ テンプレートエンジンを使用する？あるにはあるが、js で生成される(express-generator)
ts で生成されるものもあるがいらないファイルまで生成されて微妙(yeoman)
→ 自身でディレクトリの構成を考えた方がよさそう
→ なので、もろもろの設定ファイルは、自身で作成

ディレクトリ構成案
src
|__constant   定数ファイル
|
|__helper   ヘルパーファイル
|
|__models   モデルファイル
|
|__controller　コントローラーファイル
|  |
|  |__sampleController  コントローラーごとにファイルをきる
|  |                 |
|  |                 |__GetUserController.ts 　    GETコントローラー
|  |                 | 
|  |                 |__CreateUserController.ts    POSTコントローラー
|  |                 |
|  |                 |__DeleteUserController.ts    Deleteコントローラー
|  |             
|  |__router.ts　ルーターファイル
|
|__server.ts   メインファイル

ディレクトリ構成参考資料
https://qiita.com/MotohiroSiobara/items/b672b22ce0505e5e17de

環境構築

環境構築資料(結構のってる)
https://www.webdesignleaves.com/pr/jquery/typescript-development-environment.html
・package.json 作成
npm init

・typeScript インストール
npm install -D typescript

・Express のインストール
npm install -D express
npm install -D @types/express --save-dev

・ホットリロード
・コンパイル(トランスパイル)
基本 node で typeScript を動かすとき、js ファイルに変換した後に実行する必要がある

tsconfig.json
→ トランスパイルの設定ファイル
全てのファイルをコンパイルするとか、

ファイルオプション参考資料
https://qiita.com/crml1206/items/8fbfbecc0b40968bfc42
https://www.wakuwakubank.com/posts/498-typescript-compiler/

通常のコンパイル方法
ex)
ts ファイルをトランスパイル
npx tsc index.js
※npm：node_modules にインストールされたコマンド（実行ファイル）を実行するためのツール

js ファイル実行
node index.js

watch オプションを使用することで、ts ファイルが更新されるたびに自動的に再コンパイルしてくれる

開発の際にいちいちコンパイルするのは、めんどいのでホットリロードを使用

・ホットリロードは、２つやり方がある
・ts-node-dev
ts ファイルを js ファイルにコンパイルすることなく、起動することができ、
さらに監視モードで素早く再起動が使用できる

ts-node-dev インストール
npm install -D ts-node-dev

package.json への設定
ts-node-dev --respawn <監視するファイル>
上記を scripts に記載

https://qiita.com/sa9ra4ma/items/67ab5ac6fea3e5f065b0

※Docker 内でやる時は、「--poll」オプションを追加する必要あり
https://qiita.com/manten120/items/3e1723d78c9c0d158262

・ts-node と nodemon
ts-node：ts ファイルを js ファイルにコンパイルすることなく、起動することができる
npm install -D ts-node

nodemon：
npm install -D nodemon

各種ファイル(package.json,tsconfig.json,nodemon.json)設定
https://chaika.hatenablog.com/entry/2020/09/29/083000

ts-node-dev の方が設定することが少なそうだしこっちでやってみる

・vscode デバック有効
・launch.json 生成
vscode デバックボタンを押すと「launch.json を作成します」というリンクがでるのでクリック
そうすると launch.json が生成される

・launch.json ファイル設定
runtimeExecutable 属性では、ランタイム環境を指定できる
ts-node-dev をランタイム環境に指定したい場合
ex)${workspaceFolder}/node_modules/.bin/ts-node-dev

https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-support-for-npm-and-other-tools

ランタイム環境の引数を設定できる
ex)"runtimeArgs": [
"--respawn",
"--poll"
],

※MacOSは上記の引数を渡さなくても更新されるが、Windowsは引数がないとうまく動かない

program 属性には、実行するファイルを指定

launch.json のオプション
https://amateur-engineer-blog.com/vscode-launchjson/

・ts-node をデバックに使用する方法
https://qiita.com/murasuke/items/9ce3eeeee949324f32b7

・プロセスが死なないときのコマンド
kill -9 $(lsof -t -i:3000)

・vsCodeデバッグ終了後、タスクが残ってしまう問題
task.jsonにexpressのタスクをキルしてくれるコマンドを書き、デバッグ終了時自動で実行してくれるように
launch.jsonにpostDebugTaskオプションを追加
lsofコマンドを使用してタスクをキルするため、lsofライブラリをインストールした

・検証ツール
swagger とか postman とか色々


基礎知識
基本公式をみればなんとかなる
https://expressjs.com/

・メソッドについて
req, res, next

res.query
クエリパラメータの値が入ってくる
値を何も指定しなかったら「undefined」でくる

req.body
リクエストボディの値が入ってくる

https://qiita.com/syumiwohossu/items/f9ee317f31adc3ad387b

・helmet設定
helmetとは
httpヘッダの設定ができる
主にXSSやスクリプトインジェクションから守るために

helmetインストール
npm i helmet

型定義インストール
npm i -D @types/helmet

基本のデフォルト設定でヘッダーは保護されそうだが、CSPとかオリジン関係は設定する必要あるかも(フロントとの兼ね合いから)
CSP
CSPデフォルト値(selfは、同一オリジン)
設定したオリジンだけ許可する
https://zenn.dev/tatsuyasusukida/articles/express-content-security-policy

クロスオリジン系
COEP
ドキュメントに明示的に許可を与えていないクロスオリジンのリソースを、ドキュメントが読み込むことを防ぐ
オプション
Cross-Origin-Embedder-Policy: unsafe-none
デフォルト値　CORSプロトコルやCross-Origin-Resource-Policyヘッダーで明示的に許可しなくても、クロスオリジンのリソースを取得することができる
Cross-Origin-Embedder-Policy: require-corp
クロスオリジンからは、CORS or CORP なしのリソースは読み込めないようにする。
↓
require-corp を使用して COEP を有効にし、クロスオリジンのリソースを読み込む必要がある場合は、CORS をサポートする必要があり、
COEP によるブロックを回避するために、リソースを別のオリジンから読み込み可能であると明示的にマークする必要がある

COOP
window.opener へのアクセス制限を掛ける
デフォルト値：same-orizin

CORP
cross-origin なページから、読み込まれないようにする
対象リソース：画像, CSS, JSなど
デフォルト値：same-orizin

CORS
cross-origin なページから、読み込まれないようにする
対象リソース：XHRによってアクセスされるページ
CORSライブラリで設定

オリジン系の説明
https://zenn.dev/toukairin/articles/b4bfc6ee35056f
https://laboradian.com/coep-coop-corp-cors/

helmetで設定されるヘッダーについて　オプションとか
https://www.npmjs.com/package/helmet

参考資料
https://zenn.dev/s1r_j/articles/6a8e2d593bfc08e21392
https://levelup.gitconnected.com/mastering-typescript-securing-rest-apis-in-express-js-with-api-keys-9ea5a1e799f7
https://stackoverflow.com/questions/60706823/what-modules-of-helmet-should-i-use-in-my-rest-api

・CORS対策
corsインストール
npm install cors

型定義インストール
npm i -D @types/cors

オプション設定
https://www.npmjs.com/package/cors

プリフライトリクエスト

CORSについて
この記事味とけばある程度理解できる
https://zenn.dev/riko/articles/cors_deepen_understanding

・Cookie セッション・モジュール
1.express-session
セッション識別子(sessionID)のみを Cookie 内のクライアントに保存し、セッション データをサーバー (通常はデータベース) に保存

2.cookie-session
セッション キーだけではなく、セッション全体を Cookie に保存

・環境変数を管理する
envファイルを使えるように
npm install dotenv

dotenv.config({ path: .envファイルのパス })
process.env.ファイルで作成した変数
ex)process.env.PORT

本番とデバックで切り替えれるようにしたい

参考にできそうな資料
https://auth0.com/blog/node-js-and-typescript-tutorial-build-a-crud-api/

・共通エラーハンドリング
参考になりそう
https://qiita.com/nyandora/items/cd4f12eb62295c10269c

・検証ツール
swagger
swagger-jsdoc - ソースコメント等でAPIを書くためのライブラリ
Swagger-UI - APIドキュメントを表示するWebビューアー


・DB接続ドライバ
DBは何を使用する？
それによって接続ドライバライブラリインストール


ーーーーーーとどーーーーーー
・swagger実装
・helmet要素まとめる
・CORS対策もう一度さらってまとめる
・セキュリティさらう
・実装
作成していくが必要そうなものがあれば適宜追加していく
→セキュリティ周りとか
・共通エラーハンドリング
・env本番と開発で切り替えれるように
・session実装
sessionを使用する時に調べる感じで